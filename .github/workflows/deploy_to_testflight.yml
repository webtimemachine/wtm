name: iOS Build and Deploy Workflow

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches: 
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy iOS Safari Extension
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'

      - name: Install Ruby Dependencies
        run: |
          gem install bundler
          bundle install
        working-directory: ./xcode-client

      - name: Secrets to env
        uses: shine1594/secrets-to-env-action@v1.6.1
        with:
          # json string of github repository secrets
          secrets: ${{ toJSON(secrets) }}
          secrets_env: all
          overwrite_prod: false
          file_name_prod: "./react-app/.env"
          
      
      - name: Install Node.js Dependencies and Build React Native App
        run: |
          npm install
          npm run build
        working-directory: ./react-app

      - name: Decode and Install Apple Provisioning Profiles and Certificate
        run: |
            echo "${{ secrets.ENCODED_CERTIFICATE }}" | base64 --decode --output cert.p12
            echo "${{ secrets.ENCODED_PROVISIONING_PROFILE_APP }}" | base64 --decode --output app.mobileprovision
        
            KEYCHAIN_PATH=$RUNNER_TEMP/my_temporary.keychain
            security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
            security import cert.p12 -P "${{ secrets.P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychains -d user -s $KEYCHAIN_PATH
            security default-keychain -s $KEYCHAIN_PATH
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
        
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        env:
          ENCODED_CERTIFICATE: ${{ secrets.ENCODED_CERTIFICATE }}
          ENCODED_PROVISIONING_PROFILE_APP: ${{ secrets.ENCODED_PROVISIONING_PROFILE_APP }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}

      - name: Execute Fastlane Match
        run: |
            fastlane match appstore --readonly --app_identifier "com.ttm246.app" --git_url "https://${{ secrets.GH_TOKEN }}:x-oauth-basic@github.com/webtimemachine/wtm-cert.git"
        env:
            MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        working-directory: ./xcode-client

      - name: Build and Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          echo "$APP_STORE_CONNECT_API_KEY" > api_key.json
          fastlane beta
        working-directory: ./xcode-client

      - name: Get Release Upload URL
        id: get_release
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ github.ref_name }}'
            });
            return release.data.upload_url;

      - name: Upload IPA to GitHub Releases
        uses: actions/upload-release-asset@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./xcode-client/build/WebTimeMachine.ipa
          asset_name: WebTimeMachine.ipa
          asset_content_type: application/octet-stream

        
